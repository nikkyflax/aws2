---
AWSTemplateFormatVersion: '2010-09-09'
Description: Wordpress ASG with TG LB RDS EFS

Parameters:
  ImageId:
    Type: String
    Description: 'Linux 2 AMI for Ireland eu-west1 Region'
    Default: 'ami-0c1bc246476a5572b'
  InstanceType:
    Type: String
    Description: Choosing t2 micro because it is free
    Default: t2.micro
  Key1:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: key1
  Snet1:
    Description: Subnet1 ID
    Type: String
    Default: subnet-00a52f2365b335e45
  Snet2:
    Description: Subnet2 ID
    Type: String
    Default: subnet-06214732dec4ac159	
  Snet3:
    Description: Subnet3 ID
    Type: String
    Default: subnet-0a59b2fb9b98b7bc7
  VPCID:
    Description: VPC ID
    Type: String
    Default: vpc-0e255d330e11af1f4

Resources:
  HTTPSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Instance to allow HTTP access via port 80
      SecurityGroupIngress:
        IpProtocol: tcp
        SourceSecurityGroupName: !Ref HTTPSecGroupFrontend
        FromPort: 80
        ToPort: 80
  SSHSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Instance to allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
  HTTPSecGroupFrontend:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: LoadBalancer to allow HTTP access to minTargetGroup 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WPInstanceSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Instance to EFS and RDS
  EFSSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Instance to allow EFS access
      SecurityGroupIngress:
        IpProtocol: tcp
        SourceSecurityGroupName: !Ref WPInstanceSecGroup
        FromPort: 2049
        ToPort: 2049
      VpcId: !Ref VPCID
  RDSSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Instance to allow RDS access
      SecurityGroupIngress:
        IpProtocol: tcp
        SourceSecurityGroupName: !Ref WPInstanceSecGroup
        FromPort: 3306
        ToPort: 3306
      VpcId: !Ref VPCID

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EFS'

  EFSMountTargetSub1:  
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref Snet1

  EFSMountTargetSub2:  
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref Snet2

  EFSMountTargetSub3:  
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref Snet3

  RDSmySQL:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Sub '${AWS::StackName}-dbinstance'
      DBName: WP_DB_MAIN
      Engine: mysql
      EngineVersion: 8.0.28
      MasterUsername: admin
      MasterUserPassword: Kanelbulle1337!
      Port: 3306
      PubliclyAccessible: no
      VPCSecurityGroups: 
        - !GetAtt RDSSecGroup.GroupId

  
  WPec2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - EFSMountTargetSub1
      - EFSMountTargetSub2
      - EFSMountTargetSub3
      - RDSmySQL
    Properties: 
      SubnetId: 
        Ref: Snet1
        Ref: Snet2
        Ref: Snet3
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref Key1
      SecurityGroupIds: 
        - !GetAtt HTTPSecGroup.GroupId 
        - !GetAtt SSHSecGroup.GroupId
        - !GetAtt WPInstanceSecGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2'
      InstanceInitiatedShutdownBehavior: terminate
      UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y amazon-efs-utils
              mkdir -p /var/www/html
              groupadd www
              usermod -a -G www ec2-user
              chgrp -R www /var/www
              chmod 2775 /var/www
              find /var/www -type d -exec sudo chmod 2775 {} +
              find /var/www -type f -exec sudo chmod 0664 {} +
              mount -t efs -o tls ${EFSFileSystem} /var/www/html
              yum update -y
              amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              usermod -a -G apache ec2-user
              chown -R ec2-user:apache /var/www
              chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
              find /var/www -type f -exec sudo chmod 0664 {} \;
              wget https://wordpress.org/latest.tar.gz
              tar -xzf latest.tar.gz
              cp -r wordpress/* /var/www/html/
              cd /var/www/html
              cp wp-config-sample.php wp-config.php
              sed -i 's/database_name_here/WP_DB_MAIN/' wp-config.php
              sed -i 's/username_here/admin/' wp-config.php
              sed -i 's/password_here/Kanelbulle1337!/' wp-config.php
              sed -i 's/localhost*/${RDSmySQL.Endpoint.Address}:3306/' wp-config.php
              SALT=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/)
              STRING='put your unique phrase here'
              printf '%s\n' "g/$STRING/d" a "$SALT" . w | ed -s wp-config.php
              sed -i '/<Directory "\/var\/www\/html">/,/<\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
              sudo yum install php-gd
              yum install php-mbstring php-xml -y
              systemctl restart httpd
              systemctl restart php-fpm
              cd /var/www/html
              wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz
              mkdir phpMyAdmin && tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin --strip-components 1
              rm phpMyAdmin-latest-all-languages.tar.gz
              cd /var/www/html/phpMyAdmin
              cp config.sample.inc.php config.inc.php
              sed -i 's/localhost/${RDSmySQL.Endpoint.Address}:3306/' config.inc.php
              shutdown now
  
  LaunchTemplateNiklas: 
    Type: 'AWS::EC2::LaunchTemplate' 
    Properties: 
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling' #The name of the Launch Template, it will take the stackname and add "-launch-template-for-auto-scaling"
      LaunchTemplateData: 
        SecurityGroupIds: 
          - !GetAtt HTTPSecGroup.GroupId 
          - !GetAtt SSHSecGroup.GroupId 
          - !GetAtt WPInstanceSecGroup.GroupId
        ImageId: !Ref ImageId 
        InstanceType: !Ref InstanceType 
        KeyName: !Ref Key1 
        UserData: 
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y amazon-efs-utils
              mkdir -p /var/www/html
              groupadd www
              usermod -a -G www ec2-user
              chgrp -R www /var/www/html
              chmod 2775 /var/www/html
              find /var/www/html -type d -exec sudo chmod 2775 {} +
              find /var/www/html -type f -exec sudo chmod 0664 {} +
              mount -t efs -o tls ${EFSFileSystem} /var/www/html/
              amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              usermod -a -G apache ec2-user
              chown -R ec2-user:apache /var/www
              chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} ;
              find /var/www -type f -exec sudo chmod 0664 {} ;
              sed -i '/<Directory "/var/www/html">/,/</Directory>/ s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
              yum install php-gd -y
              systemctl restart httpd
              amazon-linux-extras install epel -y
              yum update -y
              yum install stress -y
              yum install php-mbstring php-xml -y
              systemctl restart httpd
              systemctl restart php-fpm


  AutoscalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup #Type of Resource
    DependsOn: 
      - WPec2
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateNiklas
        Version: !GetAtt LaunchTemplateNiklas.LatestVersionNumber
      TargetGroupARNs: 
        - !Ref TargetGroup1 
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:   
        - !Ref Snet1
        - !Ref Snet2
        - !Ref Snet3
      MetricsCollection: 
        - Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"
  minScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy 
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoscalingGroup1
      Cooldown: '60'
      ScalingAdjustment: '1'

  minScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy 
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoscalingGroup1
      Cooldown: '60'
      ScalingAdjustment: "-1"
  
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '80'
      AlarmActions:
      - Ref: minScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoscalingGroup1
      ComparisonOperator: GreaterThanThreshold
  
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm #Type of Resource
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
      - Ref: minScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoscalingGroup1
      ComparisonOperator: LessThanThreshold
 
  LoadBalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer #Type of Resource
    Properties: 
      IpAddressType: ipv4
      Name: LB1
      SecurityGroups: 
        - !GetAtt HTTPSecGroupFrontend.GroupId
      Subnets: 
        - !Ref Snet1
        - !Ref Snet2
        - !Ref Snet3
      Type: application
      Scheme: internet-facing 
  
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup #Type of Resource
    Properties:
      IpAddressType: ipv4
      Name: TG1
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPCID

  Listener1:
    Type: AWS::ElasticLoadBalancingV2::Listener #Type of Resource
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref LoadBalancer1
      Port: 80
      Protocol: HTTP